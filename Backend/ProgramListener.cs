//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Program.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Backend {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ProgramParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public interface IProgramListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ProgramParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] ProgramParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ProgramParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] ProgramParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ProgramParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmt([NotNull] ProgramParser.StmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ProgramParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmt([NotNull] ProgramParser.StmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ProgramParser.decl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecl([NotNull] ProgramParser.DeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ProgramParser.decl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecl([NotNull] ProgramParser.DeclContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>localVarDecl</c>
	/// labeled alternative in <see cref="ProgramParser.variableDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLocalVarDecl([NotNull] ProgramParser.LocalVarDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>localVarDecl</c>
	/// labeled alternative in <see cref="ProgramParser.variableDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLocalVarDecl([NotNull] ProgramParser.LocalVarDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>localArrDecl</c>
	/// labeled alternative in <see cref="ProgramParser.variableDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLocalArrDecl([NotNull] ProgramParser.LocalArrDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>localArrDecl</c>
	/// labeled alternative in <see cref="ProgramParser.variableDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLocalArrDecl([NotNull] ProgramParser.LocalArrDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>arrayParam</c>
	/// labeled alternative in <see cref="ProgramParser.paramDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayParam([NotNull] ProgramParser.ArrayParamContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>arrayParam</c>
	/// labeled alternative in <see cref="ProgramParser.paramDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayParam([NotNull] ProgramParser.ArrayParamContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>variableParam</c>
	/// labeled alternative in <see cref="ProgramParser.paramDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableParam([NotNull] ProgramParser.VariableParamContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>variableParam</c>
	/// labeled alternative in <see cref="ProgramParser.paramDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableParam([NotNull] ProgramParser.VariableParamContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ProgramParser.funcTail"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncTail([NotNull] ProgramParser.FuncTailContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ProgramParser.funcTail"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncTail([NotNull] ProgramParser.FuncTailContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ProgramParser.funcHead"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncHead([NotNull] ProgramParser.FuncHeadContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ProgramParser.funcHead"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncHead([NotNull] ProgramParser.FuncHeadContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ProgramParser.funcDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncDef([NotNull] ProgramParser.FuncDefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ProgramParser.funcDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncDef([NotNull] ProgramParser.FuncDefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ProgramParser.quaternary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQuaternary([NotNull] ProgramParser.QuaternaryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ProgramParser.quaternary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQuaternary([NotNull] ProgramParser.QuaternaryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ProgramParser.literalAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralAssignment([NotNull] ProgramParser.LiteralAssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ProgramParser.literalAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralAssignment([NotNull] ProgramParser.LiteralAssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ProgramParser.variableAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableAssignment([NotNull] ProgramParser.VariableAssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ProgramParser.variableAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableAssignment([NotNull] ProgramParser.VariableAssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>digitAddOrMinus</c>
	/// labeled alternative in <see cref="ProgramParser.addOrMinus"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDigitAddOrMinus([NotNull] ProgramParser.DigitAddOrMinusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>digitAddOrMinus</c>
	/// labeled alternative in <see cref="ProgramParser.addOrMinus"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDigitAddOrMinus([NotNull] ProgramParser.DigitAddOrMinusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>idFirstAddOrMinus</c>
	/// labeled alternative in <see cref="ProgramParser.addOrMinus"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdFirstAddOrMinus([NotNull] ProgramParser.IdFirstAddOrMinusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>idFirstAddOrMinus</c>
	/// labeled alternative in <see cref="ProgramParser.addOrMinus"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdFirstAddOrMinus([NotNull] ProgramParser.IdFirstAddOrMinusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>numFirstAddOrMinus</c>
	/// labeled alternative in <see cref="ProgramParser.addOrMinus"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumFirstAddOrMinus([NotNull] ProgramParser.NumFirstAddOrMinusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>numFirstAddOrMinus</c>
	/// labeled alternative in <see cref="ProgramParser.addOrMinus"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumFirstAddOrMinus([NotNull] ProgramParser.NumFirstAddOrMinusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>idAddOrMinus</c>
	/// labeled alternative in <see cref="ProgramParser.addOrMinus"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdAddOrMinus([NotNull] ProgramParser.IdAddOrMinusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>idAddOrMinus</c>
	/// labeled alternative in <see cref="ProgramParser.addOrMinus"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdAddOrMinus([NotNull] ProgramParser.IdAddOrMinusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>digitMultiple</c>
	/// labeled alternative in <see cref="ProgramParser.multiple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDigitMultiple([NotNull] ProgramParser.DigitMultipleContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>digitMultiple</c>
	/// labeled alternative in <see cref="ProgramParser.multiple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDigitMultiple([NotNull] ProgramParser.DigitMultipleContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>idFirstMultiple</c>
	/// labeled alternative in <see cref="ProgramParser.multiple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdFirstMultiple([NotNull] ProgramParser.IdFirstMultipleContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>idFirstMultiple</c>
	/// labeled alternative in <see cref="ProgramParser.multiple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdFirstMultiple([NotNull] ProgramParser.IdFirstMultipleContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>numFirstMultiple</c>
	/// labeled alternative in <see cref="ProgramParser.multiple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumFirstMultiple([NotNull] ProgramParser.NumFirstMultipleContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>numFirstMultiple</c>
	/// labeled alternative in <see cref="ProgramParser.multiple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumFirstMultiple([NotNull] ProgramParser.NumFirstMultipleContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>idMultiple</c>
	/// labeled alternative in <see cref="ProgramParser.multiple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdMultiple([NotNull] ProgramParser.IdMultipleContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>idMultiple</c>
	/// labeled alternative in <see cref="ProgramParser.multiple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdMultiple([NotNull] ProgramParser.IdMultipleContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>digitDivide</c>
	/// labeled alternative in <see cref="ProgramParser.divide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDigitDivide([NotNull] ProgramParser.DigitDivideContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>digitDivide</c>
	/// labeled alternative in <see cref="ProgramParser.divide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDigitDivide([NotNull] ProgramParser.DigitDivideContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>idFirstDivide</c>
	/// labeled alternative in <see cref="ProgramParser.divide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdFirstDivide([NotNull] ProgramParser.IdFirstDivideContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>idFirstDivide</c>
	/// labeled alternative in <see cref="ProgramParser.divide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdFirstDivide([NotNull] ProgramParser.IdFirstDivideContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>numFirstDivide</c>
	/// labeled alternative in <see cref="ProgramParser.divide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumFirstDivide([NotNull] ProgramParser.NumFirstDivideContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>numFirstDivide</c>
	/// labeled alternative in <see cref="ProgramParser.divide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumFirstDivide([NotNull] ProgramParser.NumFirstDivideContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>idDivide</c>
	/// labeled alternative in <see cref="ProgramParser.divide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdDivide([NotNull] ProgramParser.IdDivideContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>idDivide</c>
	/// labeled alternative in <see cref="ProgramParser.divide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdDivide([NotNull] ProgramParser.IdDivideContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>variableReturn</c>
	/// labeled alternative in <see cref="ProgramParser.return"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableReturn([NotNull] ProgramParser.VariableReturnContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>variableReturn</c>
	/// labeled alternative in <see cref="ProgramParser.return"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableReturn([NotNull] ProgramParser.VariableReturnContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>literalReturn</c>
	/// labeled alternative in <see cref="ProgramParser.return"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralReturn([NotNull] ProgramParser.LiteralReturnContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>literalReturn</c>
	/// labeled alternative in <see cref="ProgramParser.return"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralReturn([NotNull] ProgramParser.LiteralReturnContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>digitJumpEqual</c>
	/// labeled alternative in <see cref="ProgramParser.jumpEqual"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDigitJumpEqual([NotNull] ProgramParser.DigitJumpEqualContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>digitJumpEqual</c>
	/// labeled alternative in <see cref="ProgramParser.jumpEqual"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDigitJumpEqual([NotNull] ProgramParser.DigitJumpEqualContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>idFirstJumpEqual</c>
	/// labeled alternative in <see cref="ProgramParser.jumpEqual"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdFirstJumpEqual([NotNull] ProgramParser.IdFirstJumpEqualContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>idFirstJumpEqual</c>
	/// labeled alternative in <see cref="ProgramParser.jumpEqual"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdFirstJumpEqual([NotNull] ProgramParser.IdFirstJumpEqualContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>numFirstJumpEqual</c>
	/// labeled alternative in <see cref="ProgramParser.jumpEqual"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumFirstJumpEqual([NotNull] ProgramParser.NumFirstJumpEqualContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>numFirstJumpEqual</c>
	/// labeled alternative in <see cref="ProgramParser.jumpEqual"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumFirstJumpEqual([NotNull] ProgramParser.NumFirstJumpEqualContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>idJumpEqual</c>
	/// labeled alternative in <see cref="ProgramParser.jumpEqual"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdJumpEqual([NotNull] ProgramParser.IdJumpEqualContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>idJumpEqual</c>
	/// labeled alternative in <see cref="ProgramParser.jumpEqual"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdJumpEqual([NotNull] ProgramParser.IdJumpEqualContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ProgramParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParam([NotNull] ProgramParser.ParamContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ProgramParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParam([NotNull] ProgramParser.ParamContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ProgramParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCall([NotNull] ProgramParser.CallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ProgramParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCall([NotNull] ProgramParser.CallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ProgramParser.end"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnd([NotNull] ProgramParser.EndContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ProgramParser.end"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnd([NotNull] ProgramParser.EndContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ProgramParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable([NotNull] ProgramParser.VariableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ProgramParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable([NotNull] ProgramParser.VariableContext context);
}
} // namespace Backend
